// Generated by CoffeeScript 1.3.1
var TestRunner, global, root;

if (typeof exports !== "undefined" && exports !== null) {
  root = exports;
} else {
  root = window;
  global = window;
}

TestRunner = (function() {

  TestRunner.name = 'TestRunner';

  function TestRunner(trace) {
    this.trace = trace != null ? trace : false;
    this.errors = 0;
    this.tests = 0;
    this.suite = "";
  }

  TestRunner.prototype.describe = function(text) {
    this.suite = text;
    return console.log("Running specs for " + text);
  };

  TestRunner.prototype.red = function(msg) {
    return "\x1b[31m" + msg + "\x1b[0m";
  };

  TestRunner.prototype.green = function(msg) {
    return "\x1b[32m" + msg + "\x1b[0m";
  };

  TestRunner.prototype.areEqual = function(a, b) {
    if (a !== b) {
      throw "are not equal";
    }
    return this;
  };

  TestRunner.prototype.isTrue = function(a) {
    if (!!!a) {
      throw "is not true";
    }
    return this;
  };

  TestRunner.prototype.exists = function(a) {
    if (typeof a === "undefined") {
      throw "does not exist";
    }
    return this;
  };

  TestRunner.prototype.test = function(name, fn) {
    this.tests++;
    try {
      fn();
      return console.log(this.green("☑ " + this.suite + " " + name));
    } catch (err) {
      this.errors++;
      console.error(this.red("☒ " + this.suite + " " + name));
      if (this.trace && err.hasOwnProperty('stack')) {
        return console.log(err.stack);
      }
    }
  };

  TestRunner.prototype.report = function() {
    console.log("-------------------");
    if (this.errors > 0) {
      return console.error("" + (this.red('☒')) + " " + this.errors + "/" + this.tests + " tests failed");
    } else {
      return console.log("" + (this.green('☑')) + " All tests passed");
    }
  };

  return TestRunner;

})();

root.TestRunner = TestRunner;
